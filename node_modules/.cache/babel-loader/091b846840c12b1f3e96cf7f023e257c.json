{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/kokisakano/tutorial/react-tutorial/src/index.js\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { createPortal } from \"react-dom/cjs/react-dom.development\";\nimport \"./index.css\";\n\nfunction Square(props) {\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    className: \"square\",\n    onClick: props.onClick,\n    children: props.value\n  }, props.i, false, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 9\n  }, this);\n}\n\n_c = Square;\n\nclass Board extends React.Component {\n  renderSquare(i) {\n    return /*#__PURE__*/_jsxDEV(Square, {\n      i: i,\n      value: this.props.squares[i],\n      onClick: () => this.props.onClick(i)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 13\n    }, this);\n  }\n\n  render() {\n    const squareBoard = [];\n\n    for (let i = 0; i < 3; i++) {\n      let rowBoard = [];\n\n      for (let j = 0; j < 3; j++) {\n        rowBoard.push(this.renderSquare(j + 3 * i));\n      }\n\n      squareBoard.push( /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"board-row\",\n        children: rowBoard\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 17\n      }, this));\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: squareBoard\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      history: [{\n        squares: Array(9).fill(null)\n      }],\n      stepNumber: 0,\n      xIsNext: true\n    };\n  }\n\n  handleClick(i) {\n    const history = this.state.history.slice(0, this.state.stepNumber + 1);\n    const current = history[history.length - 1];\n    const squares = current.squares.slice();\n\n    if (calculateWinner(squares) || squares[i]) {\n      return;\n    }\n\n    squares[i] = this.state.xIsNext ? \"X\" : \"O\";\n    this.setState({\n      history: history.concat([{\n        squares: squares\n      }]),\n      stepNumber: history.length,\n      xIsNext: !this.state.xIsNext\n    });\n  }\n\n  jumpTo(step) {\n    this.setState({\n      stepNumber: step,\n      xIsNext: step % 2 === 0\n    });\n  }\n\n  render() {\n    const history = this.state.history;\n    const current = history[this.state.stepNumber];\n    const winner = calculateWinner(current.squares);\n    const moves = history.map((step, move) => {\n      const desc = move ? 'Go to move #' + move : 'Go to game start';\n      return /*#__PURE__*/_jsxDEV(\"li\", {\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => this.jumpTo(move),\n          children: move === this.state.stepNumber ? /*#__PURE__*/_jsxDEV(\"b\", {\n            children: desc\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 31\n          }, this) : desc\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 21\n        }, this)\n      }, move, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 17\n      }, this);\n    });\n    let status;\n\n    if (winner) {\n      status = \"Winner: \" + winner;\n    } else {\n      status = \"Next player: \" + (this.state.xIsNext ? \"X\" : \"O\");\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-board\",\n        children: /*#__PURE__*/_jsxDEV(Board, {\n          squares: current.squares,\n          onClick: i => this.handleClick(i)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-info\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: status\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"ol\", {\n          children: moves\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 13\n    }, this);\n  }\n\n} // ========================================\n\n\nReactDOM.render( /*#__PURE__*/_jsxDEV(Game, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 135,\n  columnNumber: 17\n}, this), document.getElementById(\"root\"));\n\nfunction calculateWinner(squares) {\n  const lines = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]];\n\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n\n  return null;\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"Square\");","map":{"version":3,"sources":["/Users/kokisakano/tutorial/react-tutorial/src/index.js"],"names":["React","ReactDOM","createPortal","Square","props","onClick","value","i","Board","Component","renderSquare","squares","render","squareBoard","rowBoard","j","push","Game","constructor","state","history","Array","fill","stepNumber","xIsNext","handleClick","slice","current","length","calculateWinner","setState","concat","jumpTo","step","winner","moves","map","move","desc","status","document","getElementById","lines","a","b","c"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { createPortal } from \"react-dom/cjs/react-dom.development\";\n\nimport \"./index.css\"\n\nfunction Square(props) {\n    return (\n        <button className=\"square\" onClick={props.onClick} key={props.i}>\n            {props.value}\n        </button>\n    );\n}\n\nclass Board extends React.Component {\n    renderSquare(i) {\n        return (\n            <Square\n                i = {i}\n                value={this.props.squares[i]}\n                onClick={() => this.props.onClick(i)}\n            />\n        );\n    }\n\n    render() {\n        const squareBoard = [];\n        for(let i=0; i<3; i++){\n            let rowBoard = [];\n            for(let j=0;j<3; j++){\n                rowBoard.push(this.renderSquare(j+3*i));\n            }\n            squareBoard.push(\n                <div className=\"board-row\" key={i}>\n                    {rowBoard}\n                </div>\n            )\n        }\n        return (\n            <div>\n                {squareBoard}\n            </div>\n        );\n    }\n}\n\nclass Game extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            history: [\n                {\n                    squares: Array(9).fill(null)\n                }\n            ],\n            stepNumber: 0,\n            xIsNext: true\n        };\n    }\n\n    handleClick(i) {\n        const history = this.state.history.slice(0, this.state.stepNumber + 1);\n        const current = history[history.length - 1];\n        const squares = current.squares.slice();\n        if (calculateWinner(squares) || squares[i]) {\n            return;\n        }\n        squares[i] = this.state.xIsNext ? \"X\" : \"O\";\n        this.setState({\n            history: history.concat([\n                {\n                    squares: squares\n                }\n            ]),\n            stepNumber: history.length,\n            xIsNext: !this.state.xIsNext\n        });\n    }\n\n    jumpTo(step) {\n        this.setState({\n            stepNumber: step,\n            xIsNext: (step % 2) === 0\n        });\n    }\n\n    render() {\n        const history = this.state.history;\n        const current = history[this.state.stepNumber];\n        const winner = calculateWinner(current.squares);\n\n        const moves = history.map((step, move) => {\n            const desc = move ?\n                'Go to move #' + move :\n                'Go to game start';\n            return (\n                <li key={move}>\n                    <button onClick={() => this.jumpTo(move)}>\n                        {\n                            move === this.state.stepNumber\n                            ? <b>{desc}</b>\n                            : desc\n                        }\n                    </button>\n                </li>\n            );\n        });\n\n        let status;\n        if (winner) {\n            status = \"Winner: \" + winner;\n        } else {\n            status = \"Next player: \" + (this.state.xIsNext ? \"X\" : \"O\");\n        }\n\n        return (\n            <div className=\"game\">\n                <div className=\"game-board\">\n                    <Board\n                        squares={current.squares}\n                        onClick={i => this.handleClick(i)}\n                    />\n                </div>\n                <div className=\"game-info\">\n                    <div>{status}</div>\n                    <ol>{moves}</ol>\n                </div>\n            </div>\n        );\n    }\n}\n\n// ========================================\n\nReactDOM.render(<Game />, document.getElementById(\"root\"));\n\nfunction calculateWinner(squares) {\n    const lines = [\n        [0, 1, 2],\n        [3, 4, 5],\n        [6, 7, 8],\n        [0, 3, 6],\n        [1, 4, 7],\n        [2, 5, 8],\n        [0, 4, 8],\n        [2, 4, 6]\n    ];\n    for (let i = 0; i < lines.length; i++) {\n        const [a, b, c] = lines[i];\n        if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n            return squares[a];\n        }\n    }\n    return null;\n}\n\n"]},"metadata":{},"sourceType":"module"}